name: Build and Test

on:
  pull_request:
    branches: '**'
  push:
    branches:
      - develop
      - master
      - release-*
    tags:    
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-rc.[0-9+]'
      - '[0-9]+.[0-9]+.[0-9]+-beta.[0-9+]'

env:
  CI: true
  MONGO_URL: mongodb://localhost:27017
  TOOL_NODE_FLAGS: --max_old_space_size=3072

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      
    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ runner.OS }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          
    - name: Cache meteor local
      uses: actions/cache@v1
      with:
        path: ./.meteor/local
        key: ${{ runner.OS }}-meteor_cache-${{ hashFiles('.meteor/versions') }}

    - name: Cache meteor
      uses: actions/cache@v1
      with:
        path: ~/.meteor
        key: ${{ runner.OS }}-meteor-${{ hashFiles('.meteor/release') }}

    - name: Use Node.js 8.15
      uses: actions/setup-node@v1
      with:
        node-version: "8.15"

    - name: Install Meteor
      run: |
        # Restore bin from cache
        set +e
        METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
        METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
        set -e
        LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
        if [ -e $LAUNCHER ]
        then
          echo "Cached Meteor bin found, restoring it"
          sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
        else
          echo "No cached Meteor bin found."
        fi

        # only install meteor if bin isn't found
        command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

    - name: Versions
      run: |
        npm --versions
        node -v
        meteor --version
        meteor npm --versions
        meteor node -v
        git version
        echo $GITHUB_REF

    - name: npm install
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: |
        meteor npm install

    - name: Launch MongoDB
      uses: wbari/start-mongoDB@v0.2
      with:
        mongoDBVersion: "4.0"

    - run: npm run lint

    - run: npm run testunit

    # To reduce memory need during actual build, build the packages solely first
    - name: Build a Meteor cache
      run: |
        # to do this we can clear the main files and it build the rest
        echo "" > server/main.js
        echo "" > client/main.js
        meteor build --server-only --debug --directory /tmp/build-temp
        git checkout -- server/main.js client/main.js

    - name: Reset Meteor
      if: startsWith(github.ref, 'refs/tags/') == 'true' || github.ref == 'refs/heads/develop'
      run: |
        meteor reset

    - name: Build Rocket.Chat From Pull Request
      if: startsWith(github.ref, 'refs/pull/') == true
      env:
        METEOR_PROFILE: 1000
      run: |
        meteor build --server-only --directory --debug /tmp/build-test

    - name: Build Rocket.Chat
      if: startsWith(github.ref, 'refs/pull/') != true
      run: |
        meteor build --server-only --directory /tmp/build-test

    - name: Prepare build
      run: |
        mkdir /tmp/build/
        cd /tmp/build-test
        tar czf /tmp/build/Rocket.Chat.tar.gz bundle
        cd /tmp/build-test/bundle/programs/server
        npm install
        cd /tmp
        tar czf Rocket.Chat.test.tar.gz ./build-test
        
    - name: Store build for tests
      uses: actions/upload-artifact@v1
      with:
        name: build-test
        path: /tmp/Rocket.Chat.test.tar.gz

    - name: Store build
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: /tmp/build

  test:
    runs-on: ubuntu-16.04
    needs: build

    strategy:
      matrix:
        node-version: ["8.15"]
        mongodb-version: ["3.4", "3.6", "4.0"]

    steps:
    - name: Launch MongoDB
      uses: wbari/start-mongoDB@v0.2
      with:
        mongoDBVersion: ${{ matrix.mongodb-version }} --noprealloc --smallfiles --replSet=rs0

    - name: Restore build for tests
      uses: actions/download-artifact@v1
      with:
        name: build-test
        path: /tmp
        
    - name: Decompress build
      run: |
        cd /tmp
        tar xzf Rocket.Chat.test.tar.gz 
        cd -

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup Chrome
      run: |
        npm i chromedriver
        
    - name: Configure Replica Set
      run: |
        docker exec mongo mongo --eval 'rs.initiate({_id:"rs0", members: [{"_id":1, "host":"localhost:27017"}]})'
        docker exec mongo mongo --eval 'rs.status()'

    - uses: actions/checkout@v1
    
    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

    - name: NPM install
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: |
        npm install

    - name: Test
      env:
        TEST_MODE: "true"
        MONGO_URL: mongodb://localhost:27017/rocketchat
        MONGO_OPLOG_URL: mongodb://localhost:27017/local
      run: |
        for i in $(seq 1 5); do (docker exec mongo mongo --eval 'db.dropDatabase()') && xvfb-run --auto-servernum npm test && s=0 && break || s=$? && sleep 1; done; (exit $s)

  notification:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Rocket.Chat Notification
      uses: RocketChat/Rocket.Chat.GitHub.Action.Notification@1.1.1
      with:
        type: ${{ job.status }}
        job_name: '**Build and Test**'
        url: ${{ secrets.ROCKETCHAT_WEBHOOK }}
        commit: true
        token: ${{ secrets.GITHUB_TOKEN }}

  build-image-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v1
      
    - name: Cache node modules
      id: cache-nodemodules
      uses: actions/cache@v1
      with:
        path: node_modules
        key: ${{ runner.OS }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          
    - name: Cache meteor local
      uses: actions/cache@v1
      with:
        path: ./.meteor/local
        key: ${{ runner.OS }}-meteor_cache-${{ hashFiles('.meteor/versions') }}

    - name: Cache meteor
      uses: actions/cache@v1
      with:
        path: ~/.meteor
        key: ${{ runner.OS }}-meteor-${{ hashFiles('.meteor/release') }}

    - name: Use Node.js 8.15
      uses: actions/setup-node@v1
      with:
        node-version: "8.15"

    - name: Install Meteor
      run: |
        # Restore bin from cache
        set +e
        METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
        METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
        set -e
        LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
        if [ -e $LAUNCHER ]
        then
          echo "Cached Meteor bin found, restoring it"
          sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
        else
          echo "No cached Meteor bin found."
        fi

        # only install meteor if bin isn't found
        command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

    - name: Versions
      run: |
        npm --versions
        node -v
        meteor --version
        meteor npm --versions
        meteor node -v
        git version
        echo $GITHUB_REF

    - name: npm install
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: |
        meteor npm install

    # To reduce memory need during actual build, build the packages solely first
    - name: Build a Meteor cache
      run: |
        # to do this we can clear the main files and it build the rest
        echo "" > server/main.js
        echo "" > client/main.js
        meteor build --server-only --debug --directory /tmp/build-temp
        git checkout -- server/main.js client/main.js

    - name: Build Rocket.Chat
      run: |
        meteor build --server-only --directory /tmp/build-pr

    - name: Build Docker image for PRs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: pr-${{ github.event.number }} 
      run: |
        cd /tmp/build-pr
        
        export OWNER="${GITHUB_REPOSITORY%/*}"

        docker login docker.pkg.github.com -u "${OWNER}" -p "${GITHUB_TOKEN}"

        cp $GITHUB_WORKSPACE/.docker/Dockerfile .
        
        export LOWERCASE_REPOSITORY=$(echo "$GITHUB_REPOSITORY" | tr "[:upper:]" "[:lower:]")
        
        export IMAGE_NAME="docker.pkg.github.com/${LOWERCASE_REPOSITORY}/rocket.chat:${VERSION}"
        
        echo "Build official Docker image ${IMAGE_NAME}"

        docker build -t $IMAGE_NAME .
        docker push $IMAGE_NAME
